from utilfunction import get_user_data, get_X_y_regression
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import linear_model
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer, make_column_transformer
import sklearn.compose
seed = 7
np.random.seed(seed)

numeric_cols = ['cantConversation', 'beforeNextDeadline', 'afterLastDeadline', 'hourofday', 'wifiChanges',
                'stationaryCount', 'walkingCount', 'runningCount', 'silenceCount', 'voiceCount', 'noiseCount',
                'unknownAudioCount', 'isSedentary']

categorical_cols = ['partofday', 'dayofweek', 'activitymajor']

preprocess = make_column_transformer(
    (['age', 'fare'], StandardScaler()),
    (['pclass', 'sex', 'embarked'], OneHotEncoder())
)


s = pd.read_pickle('sedentarism.pkl')
userid = 3
X, y = get_X_y_regression(get_user_data(s, userid))
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)
reg = linear_model.LinearRegression()
reg.fit(X_train, y_train)
plt.plot(reg.coef_)
plt.xticks(np.arange(0, len(X.columns)), X.columns, rotation='vertical')
plt.show()
y_pred = reg.predict(X_test)
print("Mean squared error: %.2f"
      % mean_squared_error(y_test, y_pred))
print('Variance score: %.2f' % r2_score(y_test, y_pred))
